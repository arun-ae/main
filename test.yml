---
- name: rsh_ui
  hosts: all
  gather_facts: true
  become: yes
  become_method: runas
  become_user: Administrator

  vars:
    act_env: "{{ tags['Environment'] | default('dv1') | lower }}"

  tasks:    
    - name: Store playbook env in a variable
      set_fact:
        env_mapping:
          dv1:
            rsh_env: dv1
            rsh_env_D: dv1
          dev:
            rsh_env: dv1
            rsh_env_D: DV1
          stg:
            rsh_env: stg
            rsh_env_D: STG
          prd:
            rsh_env: prd
            rsh_env_D: PRD

    - name: Store playbook env in a variable
      set_fact:
        rsh_env: "{{ env_mapping[act_env]['rsh_env'] }}"
        rsh_env_D: "{{ env_mapping[act_env]['rsh_env_D'] }}"  

      register: environment_value   

    - name : environment value check 
      debug:
        var: environment_value 



    - name: Create a file
      file:
        path: /path/to/your/file.txt
        state: touch
        owner: your_username
        group: your_group
        mode: "0644"
        content: |
          This is the content of the file.
          It can span multiple lines.
          You can include variables like {{ rsh_env }}.

      register: filename    

    - name : environment value check 
      debug:
        var: filename 
#---------------------------------------------------------------------------------------
    # tasks:
    # - name: Store playbook env in a variable
    #   set_fact:
    #     rsh_env: dv1
    #     rsh_env_D: dv1
    #   when: act_env == 'dv1'

    # - name: Store playbook env in a variable
    #   set_fact:
    #     rsh_env: dv1
    #     rsh_env_D: DV1
    #   when: act_env == 'dev'
  
    # - name: Store playbook env in a variable
    #   set_fact:
    #     rsh_env: prd
    #     rsh_env_D: PRD
    #   when: act_env == 'prd'

  #-------------------------------------------------------------------------------------------------------- 






    # - name: Install pip package
    #   win_chocolatey:
    #     name: python
    #     state: present
    #     version: '3.9.9'
    #     force: yes

    # - name: Check Python installation (Windows)
    #   win_shell: python --version
    #   register: python_check
    #   failed_when: python_check.rc != 0
    #   changed_when: false
    #   ignore_errors: true
    #   when: ansible_os_family == "Windows"
      
    # - name: Display Python version if installed
    #   debug:
    #     var: python_check.stdout_lines
    #   when: python_check.rc == 0
    
    # - name: upgrading pip based on version 
    #   win_shell: |
    #     $version = "{{ ae_rsh_rsh_pip_version }}"
    #     if (Get-Command python) {
    #       $pipVersion = "pip --version | Select-String -Pattern '\d+\.\d+\.\d+' -AllMatches | ForEach-Object { $_.Matches.Value }"
    #       if ($pipVersion -notmatch ' 21.2.4') {
    #         python -m pip install --upgrade pip==21.2.4
    #       }
    #     }  
    #   become: yes
    #   become_method: runas
    #   become_user: Administrator
    #   register: pip_output

    # - name: Display upgrade status
    #   debug:
    #     var: pip_output
    # - name: check version
    #   win_shell: 
    #     python3 --version
    #   register: test
      

    # - name: Install pip
    #   pip:
    #     name: pip==20.2.1 
    #     register: pip_output
    # - name: Install Pip
    #   win_chocolatey:
    #     name: pip
    #     state: present
    #   register: pip_version
    # - name: Display upgrade status
    #   debug:
    #     var: test   

# ---
# - name: Install RSH and Python
#   hosts: all
#   gather_facts: false
  # tasks:
  # #------------------------------------------------------------------------------------------------------------------- 
  #   - name: include tier_ctx.yml
  #     ansible.builtin.include_tasks:
  #       file: rsh_python.yml  
#  #-------------------------------------------------------------------------------------------------------------------
#     - name: include tier_ctx.yml
#       ansible.builtin.include_tasks:
#         file: rsh_pip.yml  

# #-------------------------------------------------------------------------------------------------------------------
#        #code for checking environment condition 

#     - name: Store playbook name in a variable
#       set_fact:
#         tier: "{{ansible_play_name[4:7]}}"
#         app_id: "{{ansible_play_name[0:3]}}"
#         env: "{{ tags['Environment'] | default('dv1') | lower }}"
#     - name: Print file status
#       debug:
#         var: "{{ item }}"
#       loop:
#         - tier
#         - app_id
#         - env
# # #-------------------------------------------------------------------------------------------------------------------

    #   #code for checking black or red colour 
    # - name: black or red 
    #   set_fact:
    #     # color: "{{ 'black' if tags.Name[-1] == 'b' else 'red' if tags.Name[-1] == 'r' }}"
    #     color: "{{ 'black' if tags.Name[-1] == 'b' else 'no_value' }}"
    #     colors: "{{ 'red' if tags.Name[-1] == 'r' else 'no_value' }}"
    # - name: print 
    #   debug: 
    #     var: "{{ item }}"
    #   loop:
    #     - color
    #     - colors
#--------------------------------------------------------------------------------------------------------------------

# #codde for checking ternary code getting values or not _________________________________________________
    # - name: color check
    #   set_fact:
    #     color: 'black'
    #   register: check  

    # - name : color check 
    #   debug:
    #     var: check      

#     - name: condition check 
#       set_fact:
#         # ae_base_agents_action_datadog: "{{ color == 'red' or color == 'black' | ansible.builtin.ternary(True, False) }}"
#         ae_base_agents_action_datadog: "{{ ((color == 'red') or (color == 'black')) | ansible.builtin.ternary(True, False) }}"
#       register: check                   


#     - name : value check 
#       debug:
#         var: check
# #------------------------------------------------------------------------------------------------------------------- 



##codde for  ENVIRONMENT checking ternary code getting values or not _________________________________________________
    # - name: environment check 
    #   set_fact:
    #     env: 'stg'
    #   register: check  

    # - name : environment check 
    #   debug:
    #     var: check      

    # - name: condition check 
    #   set_fact:
    #     # ae_base_agents_action_datadog: "{{ color == 'red' or color == 'black' | ansible.builtin.ternary(True, False) }}"
    #     ae_base_agents_action_datadog: "{{ ((env == 'stg') or (env == 'prod')) | ansible.builtin.ternary(True, False) }}"
    #   register: check                   


    # - name : value check 
    #   debug:
    #     var: check















      # loop: 
      #   - ae_base_agents_action_datadog  

    #####################################33

  # tasks:
  #   - name: Install or Upgrade Python to version 3.9.9
  #     win_chocolatey:
  #       name: python
  #       state: present
  #       version: '3.9.9'
  #     register: choco_result
  #     ignore_errors: true

    # - name: Uninstall lower version of Python
    #   win_chocolatey:
    #     name: python
    #     state: absent
    #   when: choco_result|failed

    # - name: Install or Upgrade Python to version 3.9.9 (retry)
    #   win_chocolatey:
    #     name: python
    #     state: present
    #     version: '3.9.9'
    #   when: choco_result|failed
   

    # - name: Pip Creating Requirements file
    #   win_copy:
    #     src: files/piprequirements.txt
    #     dest: C:\piprequirements.txt
    #     mode: '0700' 
    # - name: Install Python using Chocolatey
    #   win_chocolatey:
    #     name: python
    #     state: present
    #     version: '3.9.9'

        
    #   register: pip_output

    # - name: Display upgrade status
    #   debug:
    #     var: pip_output            
        



# #################################################
#     - name: Install Python 3.9.9
#       win_chocolatey:
#         name: python
#         state: present
#         version: '3.9.9'
      

#     - name: Check Python version
#       win_shell: python --version
#       register: python_version_output

#     - name: Uninstall Python if version is not 3.9.9
#       win_chocolatey:
#         name: python
#         state: absent
#       when: python_version_output.stdout != 'Python 3.9.9'

    # - name: Install Python 3.9.9
    #   win_chocolatey:
    #     name: python
    #     state: present
    #     version: '3.9.9'
        
    #   register: python

    # - name: Display upgrade status
    #   debug:
    #     var: python     
    #   when: python_version_output.stdout != 'Python 3.9.9'
##################################################################################################
    # - name: Get pip version
    #   win_shell: pip --version | Select-String -Pattern '\d+\.\d+\.\d+' -AllMatches | ForEach-Object { $_.Matches.Value }
    #   register: pip_version
    # - name: Display upgrade status
    #   debug:
    #     var: pip_version  

    # - name: Pip Upgrade if necessary
    #   win_shell: |
    #     if (Get-Command python) {
    #       $pipVersion = "pip --version | Select-String -Pattern '\d+\.\d+\.\d+' -AllMatches | ForEach-Object { $_.Matches.Value }"
    #       if ($pipVersion -ne '20.2.1') {
    #         python -m pip --disable-pip-version-check install --upgrade pip=='20.2.1'
    #       }
    #     }
    #   register: pip_output

    # - name: Display upgrade status
    #   debug:
    #     var: pip_output


    #CHAT GPT

#################################################
    # - name: Pip Upgrade if necessary
    #   win_shell: |
    #     if (Get-Command python) {
    #       $pipVersion = "pip --version | Select-String -Pattern '\d+\.\d+\.\d+' -AllMatches | ForEach-Object { $_.Matches.Value }"
    #       if ($pipVersion -notmatch '20.2.1') {
    #         python -m pip --disable-pip-version-check install --upgrade pip=='20.2.1'
    #       }
    #     }
    #   register: pip_output

    # - name: Display upgrade status
    #   debug:
    #     var: pip_output




###########################################################################################3
   # Pip Install packages

    # - name: Run PowerShell script
    #   win_shell: |
    #     if (Get-Command pip) {
    #       pip --disable-pip-version-check install -r C:/piprequirements.txt
    #     }
    #   register: file_output
    # - name : Display upgrade status
    #   debug:
    #     var: file_output 
#################################################        
    # - name: Check if Python is installed
    #   win_command: python --version
    #   register: python_check

      
    # - name: Display upgrade status
    #   debug:
    #     var: python_check
    #   # ignore_errors: true
      

    # - name: Upgrade pip
    #   win_shell: |
    #     python -m pip --disable-pip-version-check install --upgrade pip=='20.2.1'
    #   when: python_check.rc == 0  # Only run if Python is installed

    # - name: Verify pip version
    #   win_shell: |
    #     pip --version | findstr '20.2.1'
    #   register: pip_version_check
    #   failed_when: pip_version_check.rc != 0
    #   changed_when: false
    #   when: python_check.rc == 0  # Only run if Python is installed


    # # - name: Display pip version
    # #   debug:
    # #     var: pip_upgrade

    # # - name: Upgrade pip
    # #   win_shell: |
    # #     if (Get-Command python) {
    # #       python -m pip --disable-pip-version-check install --upgrade pip=='20.2.1'
    # #     }


    # - name: Install pip packages
    #   win_shell: |
    #     if(Get-Command pip) {
    #       # pip --disable-pip-version-check install -r 'C:/piprequirements.txt'
    #       python -m pip install --disable-pip-version-check -r 'C:\piprequirements.txt'

    #     }




# #  for python_rsh files developing below 
#     - name: Install Python using Chocolatey
#       win_chocolatey:
#         name: python
#         state: present
#         version: '3.9.9'
#       register: installing_python
#     - name: Display upgrade status
#       debug:
#         var: installing_python
    
# ##################################################################################################
# - name: rsh_pip
#   hosts: all
#   gather_facts: false
#   tasks:
#     - name: Pip Creating Requirements file
#       copy:
#         src: files/piprequirements.txt
#         dest: 'C:/piprequirements.txt'
#         mode: '0700'
     

#     - name: Pip Upgrade
#       win_command: >
#         python -m pip --disable-pip-version-check install --upgrade pip== '20.2.1'
#       args:
#         creates: pip --version | findstr '20.2.1'

#     - name: Pip Install packages
#       win_command: >
#         pip --disable-pip-version-check install -r piprequirements.txt