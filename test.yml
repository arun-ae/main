---
- name: rsh_ui 
  hosts: all
  gather_facts: no
  tasks:
    # - name: Store playbook name in a variable
    #   set_fact:
    #     tier: "{{ansible_play_name[4:7]}}"
    #     app_id: "{{ansible_play_name[0:3]}}"
    #     env: "{{ tags['Environment'] | default('dv1') | lower }}"
    # - name: Print file status
    #   debug:
    #     var: "{{ item }}"
    #   loop:
    #     - tier
    #     - app_id
    #     - env
    
    - name: Check oracle_client folder if missing
      win_stat: 
        path: C:\install\oracle_client
      register: file_status_oracle_client



    - name: Create directories if they don't exist
      win_file:
        path: "{{ item }}"
        state: directory
      with_items:
        - "C:\\install\\oracle_client"
        - "C:\\oracle\\NT_193000_client_home"
      when: not file_status_oracle_client.stat.exists



    - name: Check if NT_193000_client_home.zip exists
      win_stat:
        path: 'C:\\install\\oracle_client\\NT_193000_client_home.zip'
      register: file_status_oracle_zip



    - name: Download NT_193000_client_home.zip
      win_get_url:
        url: 'https://oracle-bucket-01.s3.amazonaws.com/client/vcredist/NT_193000_client_home.zip'
        dest: 'C:\\install\\oracle_client\\NT_193000_client_home.zip'
      when: not file_status_oracle_zip.stat.exists



    - name: Check oracle_client install
      win_stat:
        path: C:\oracle\NT_193000_client_home\install
      register: file_status_oracle_client




    - name: Extract Oracle client archive and set variable
      win_unzip:
        src: 'C:\install\oracle_client\NT_193000_client_home.zip'
        dest: "C:\\oracle\\NT_193000_client_home"
      register: unzip_result
      when: not file_status_oracle_client.stat.exists


    #####################################33

  # tasks:
  #   - name: Install or Upgrade Python to version 3.9.9
  #     win_chocolatey:
  #       name: python
  #       state: present
  #       version: '3.9.9'
  #     register: choco_result
  #     ignore_errors: true

    # - name: Uninstall lower version of Python
    #   win_chocolatey:
    #     name: python
    #     state: absent
    #   when: choco_result|failed

    # - name: Install or Upgrade Python to version 3.9.9 (retry)
    #   win_chocolatey:
    #     name: python
    #     state: present
    #     version: '3.9.9'
    #   when: choco_result|failed
   

    # - name: Pip Creating Requirements file
    #   win_copy:
    #     src: files/piprequirements.txt
    #     dest: C:\piprequirements.txt
    #     mode: '0700' 
    # - name: Install Python using Chocolatey
    #   win_chocolatey:
    #     name: python
    #     state: present
    #     version: '3.9.9'

        
    #   register: pip_output

    # - name: Display upgrade status
    #   debug:
    #     var: pip_output            
        



# #################################################
#     - name: Install Python 3.9.9
#       win_chocolatey:
#         name: python
#         state: present
#         version: '3.9.9'
      

#     - name: Check Python version
#       win_shell: python --version
#       register: python_version_output

#     - name: Uninstall Python if version is not 3.9.9
#       win_chocolatey:
#         name: python
#         state: absent
#       when: python_version_output.stdout != 'Python 3.9.9'

    # - name: Install Python 3.9.9
    #   win_chocolatey:
    #     name: python
    #     state: present
    #     version: '3.9.9'
        
    #   register: python

    # - name: Display upgrade status
    #   debug:
    #     var: python     
    #   when: python_version_output.stdout != 'Python 3.9.9'
##################################################################################################
    # - name: Get pip version
    #   win_shell: pip --version | Select-String -Pattern '\d+\.\d+\.\d+' -AllMatches | ForEach-Object { $_.Matches.Value }
    #   register: pip_version
    # - name: Display upgrade status
    #   debug:
    #     var: pip_version  

    # - name: Pip Upgrade if necessary
    #   win_shell: |
    #     if (Get-Command python) {
    #       $pipVersion = "pip --version | Select-String -Pattern '\d+\.\d+\.\d+' -AllMatches | ForEach-Object { $_.Matches.Value }"
    #       if ($pipVersion -ne '20.2.1') {
    #         python -m pip --disable-pip-version-check install --upgrade pip=='20.2.1'
    #       }
    #     }
    #   register: pip_output

    # - name: Display upgrade status
    #   debug:
    #     var: pip_output


    #CHAT GPT

#################################################
    # - name: Pip Upgrade if necessary
    #   win_shell: |
    #     if (Get-Command python) {
    #       $pipVersion = "pip --version | Select-String -Pattern '\d+\.\d+\.\d+' -AllMatches | ForEach-Object { $_.Matches.Value }"
    #       if ($pipVersion -notmatch '20.2.1') {
    #         python -m pip --disable-pip-version-check install --upgrade pip=='20.2.1'
    #       }
    #     }
    #   register: pip_output

    # - name: Display upgrade status
    #   debug:
    #     var: pip_output




###########################################################################################3
   # Pip Install packages

    # - name: Run PowerShell script
    #   win_shell: |
    #     if (Get-Command pip) {
    #       pip --disable-pip-version-check install -r C:/piprequirements.txt
    #     }
    #   register: file_output
    # - name : Display upgrade status
    #   debug:
    #     var: file_output 
#################################################        
    # - name: Check if Python is installed
    #   win_command: python --version
    #   register: python_check

      
    # - name: Display upgrade status
    #   debug:
    #     var: python_check
    #   # ignore_errors: true
      

    # - name: Upgrade pip
    #   win_shell: |
    #     python -m pip --disable-pip-version-check install --upgrade pip=='20.2.1'
    #   when: python_check.rc == 0  # Only run if Python is installed

    # - name: Verify pip version
    #   win_shell: |
    #     pip --version | findstr '20.2.1'
    #   register: pip_version_check
    #   failed_when: pip_version_check.rc != 0
    #   changed_when: false
    #   when: python_check.rc == 0  # Only run if Python is installed


    # # - name: Display pip version
    # #   debug:
    # #     var: pip_upgrade

    # # - name: Upgrade pip
    # #   win_shell: |
    # #     if (Get-Command python) {
    # #       python -m pip --disable-pip-version-check install --upgrade pip=='20.2.1'
    # #     }


    # - name: Install pip packages
    #   win_shell: |
    #     if(Get-Command pip) {
    #       # pip --disable-pip-version-check install -r 'C:/piprequirements.txt'
    #       python -m pip install --disable-pip-version-check -r 'C:\piprequirements.txt'

    #     }




# #  for python_rsh files developing below 
#     - name: Install Python using Chocolatey
#       win_chocolatey:
#         name: python
#         state: present
#         version: '3.9.9'
#       register: installing_python
#     - name: Display upgrade status
#       debug:
#         var: installing_python
    
